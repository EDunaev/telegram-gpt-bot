import requests
from telegram import Update
from telegram.ext import ContextTypes
from config import OPENAI_API_KEY, current_model
from helpers import is_allowed, is_admin, format_exc

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return
    user_id = update.effective_user.id
    base = "–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
    common_cmds = "–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –ø–æ–º–æ—â—å"
    if is_admin(user_id):
        extra = "\n/model <name> ‚Äî —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n/quota ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ OpenAI API"
        await update.message.reply_text(base + common_cmds + extra)
    else:
        await update.message.reply_text(base + common_cmds)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return
    user_id = update.effective_user.id
    base = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –ø–æ–º–æ—â—å"
    if is_admin(user_id):
        extra = "\n/model <name> ‚Äî —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n/quota ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ OpenAI API"
        await update.message.reply_text(base + extra)
    else:
        await update.message.reply_text(base)

async def set_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import current_model
    if not is_allowed(update):
        return
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–º–µ–Ω—É –º–æ–¥–µ–ª–∏.")
        return

    if not context.args:
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /model gpt-4o –∏–ª–∏ /model gpt-3.5-turbo"
        )
        return

    new_model = context.args[0].strip()
    from config import current_model as cm
    cm = new_model
    await update.message.reply_text(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_model}")

async def quota(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–≤–æ—Ç—ã.")
        return

    try:
        headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
        r = requests.get(
            "https://api.openai.com/dashboard/billing/credit_grants",
            headers=headers,
            timeout=10,
        )
        if r.status_code != 200:
            await update.message.reply_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–≤–æ—Ç—É (HTTP {r.status_code}): {r.text}"
            )
            return
        data = r.json()
        total = data.get("total_granted", 0.0)
        used = data.get("total_used", 0.0)
        remaining = data.get("total_available", 0.0)
        await update.message.reply_text(
            f"üí∞ –ë–∞–ª–∞–Ω—Å OpenAI API:\n"
            f"‚Äî –í—ã–¥–∞–Ω–æ: ${total:.2f}\n"
            f"‚Äî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${used:.2f}\n"
            f"‚Äî –û—Å—Ç–∞—Ç–æ–∫: ${remaining:.2f}"
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–æ—Ç—ã: {format_exc(e)}")
