#!/usr/bin/env python3
import os
import tempfile
import requests
import logging
import os
import requests
from dotenv import load_dotenv
from pydub import AudioSegment
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.ext.filters import Document
from collections import defaultdict, deque
from telegram.ext import CommandHandler
from typing import List

# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–æ–∑–∂–µ
TELEGRAM_TOKEN = None
OPENAI_API_KEY = None
DEFAULT_MODEL = None
GOOGLE_CSE_API_KEY = None
GOOGLE_CSE_CX = None
client = None
current_model = None
user_histories = defaultdict(lambda: deque(maxlen=100))

ADMINS = {1091992386, 1687504544} 
LIMITED_USERS = {111111111, 222222222, 333333333} 
CHAT_ID = -1001785925671
BOT_USERNAME = "DunaevAssistentBot"
chat_history = defaultdict(lambda: deque(maxlen=100))

logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# üîá –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram.bot").setLevel(logging.INFO)
logging.getLogger("telegram.ext._application").setLevel(logging.WARNING)
logging.getLogger("telegram.ext._updater").setLevel(logging.WARNING)
logging.getLogger("telegram.request").setLevel(logging.INFO)

# --------------------
# Helpers
# --------------------
def init_env():
    global TELEGRAM_TOKEN, OPENAI_API_KEY, DEFAULT_MODEL, GOOGLE_CSE_API_KEY, GOOGLE_CSE_CX, client, current_model
    
    # --------------------
    # Env & clients
    # --------------------
    load_dotenv()
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    DEFAULT_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo") 
    GOOGLE_CSE_API_KEY = os.getenv("GOOGLE_CSE_API_KEY")
    GOOGLE_CSE_CX = os.getenv("GOOGLE_CSE_CX")

    if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
        raise RuntimeError("TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")

    from openai import OpenAI
    client = OpenAI(api_key=OPENAI_API_KEY)
    current_model = DEFAULT_MODEL

def format_exc(e: Exception) -> str:
    return f"{type(e).__name__}: {e}"

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def is_allowed(update: Update) -> bool:
    user_id = update.effective_user.id
    chat = update.effective_chat
    message = update.message

    text = message.text or message.caption or ""
    logging.info(f"[{user_id}] - chat_id: {chat.id} - type: {chat.type} - Text: {text}")
 # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω, –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º
    if chat.type == "private" and user_id in ADMINS:
        return True

    if chat.id == CHAT_ID and chat.type in ("group", "supergroup"):
        # 1. –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if BOT_USERNAME.lower() in text.lower():
            return True
        # 2. –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if message.reply_to_message and message.reply_to_message.from_user.username == BOT_USERNAME:
            return True
    
    return False

def should_web_search(user_input: str) -> bool:
   
    # --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É—Ç–æ—á–Ω—è–µ–º —É LLM (—É–¥–æ—Ä–æ–∂–∞–µ—Ç –∑–∞–ø—Ä–æ—Å) ---
    decision_prompt = (
         "–û–ø—Ä–µ–¥–µ–ª–∏, –Ω—É–∂–µ–Ω –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫. –û—Ç–≤–µ—Ç—å —Ä–æ–≤–Ω–æ 'YES' –∏–ª–∏ 'NO'.\n"
         f"–ó–∞–ø—Ä–æ—Å: {user_input}"
    )
    try:
       decision = client.chat.completions.create(
             model=current_model,
             messages=[{"role": "user", "content": decision_prompt}],
             max_tokens=3
         ).choices[0].message.content.strip().upper()
       return decision == "YES"
    except Exception:
         return False

    return False

def google_search(query, num_results=5, date_restrict=None):
    import requests
    from urllib.parse import urlencode

    api_key = os.getenv("GOOGLE_API_KEY")
    cse_id = os.getenv("GOOGLE_CSE_ID")
    if not api_key or not cse_id:
        raise RuntimeError("GOOGLE_API_KEY –∏–ª–∏ GOOGLE_CSE_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env")

    params = {
        "q": query,
        "key": api_key,
        "cx": cse_id,
        "num": num_results
    }

    if date_restrict:
        params["dateRestrict"] = date_restrict  # –Ω–∞–ø—Ä–∏–º–µ—Ä, m6 ‚Äî –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤

    url = f"https://www.googleapis.com/customsearch/v1?{urlencode(params)}"
    resp = requests.get(url)
    resp.raise_for_status()
    data = resp.json()

    results = []
    for item in data.get("items", []):
        results.append({
            "title": item.get("title"),
            "snippet": item.get("snippet"),
            "link": item.get("link")
        })

    return results

def summarize_search_results(user_query: str, results: list) -> str:
    """
    GPT —Å–∞–º —Ä–µ—à–∞–µ—Ç: —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
    –ú—ã –ª–∏—à—å –ø–µ—Ä–µ–¥–∞—ë–º —Å—ã—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (title/snippet/link), –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    """
    if not results:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É."

    # –°–∂–∞—Ç–æ –ø–µ—Ä–µ–¥–∞—ë–º —Å–Ω–∏–ø–ø–µ—Ç—ã –≤ –º–æ–¥–µ–ª—å
    blocks = []
    for i, it in enumerate(results, 1):
        title = it.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        snippet = it.get("snippet", "")
        link = it.get("link", "")
        blocks.append(f"{i}. {title}\n{snippet}\n{link}")
    corpus = "\n\n".join(blocks)

    system_prompt = (
        "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç‚Äë–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ–±‚Äë–ø–æ–∏—Å–∫–∞. –£ —Ç–µ–±—è –ù–ï–¢ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç; "
        "–∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–Ω–∏–ø–ø–µ—Ç—ã –∏ —Å—Å—ã–ª–∫–∏ –∫–∞–∫ —Ñ–∞–∫—Ç—ã. "
        "–ó–∞–¥–∞—á–∞: –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°–ê–ú –≤—ã–±–µ—Ä–∏, —á—Ç–æ –≤–∞–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è:\n"
        "‚Ä¢ –ü–æ–π–º–∏ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: –Ω–æ–≤–æ—Å—Ç–∏/—Å–≤–æ–¥–∫–∞, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ/¬´–∫–∞–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π¬ª, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, how‚Äëto –∏ —Ç.–ø.\n"
        "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –æ–±—ä—ë–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–±–µ—Ä–∏ –ø–æ–¥ –∑–∞–¥–∞—á—É: –∫—Ä–∞—Ç–∫–∏–π –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç; –ª–∏–±–æ 3‚Äì6 –ø—É–Ω–∫—Ç–æ–≤; –ª–∏–±–æ –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä.\n"
        "‚Ä¢ –£–±–∏—Ä–∞–π –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã; –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ.\n"
        "‚Ä¢ –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–≤–µ—Ä—Ö —Å–Ω–∏–ø–ø–µ—Ç–æ–≤. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –∑–∞–¥–∞–π 1 —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.\n"
        "‚Ä¢ –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Ä–∞–∑–¥–µ–ª ¬´–ò—Å—Ç–æ—á–Ω–∏–∫–∏¬ª —Å 2‚Äì4 –°–°–´–õ–ö–ê–ú–ò, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª."
    )

    user_prompt = (
        f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ¬´{user_query}¬ª.\n\n"
        f"–ù–∏–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ / —Å–Ω–∏–ø–ø–µ—Ç / —Å—Å—ã–ª–∫–∞). "
        f"–°–ê–ú –≤—ã–±–µ—Ä–∏, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ–±—ã –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.\n\n"
        f"{corpus}"
    )

    resp = client.chat.completions.create(
        model=current_model,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user",   "content": user_prompt}
        ],
        temperature=0.2
    )
    return resp.choices[0].message.content


# --------------------
# Handlers
# --------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return
    user_id = update.effective_user.id
    base = "–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
    common_cmds = "–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –ø–æ–º–æ—â—å"
    if is_admin(user_id):
        extra = "\n/model <name> ‚Äî —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n/quota ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ OpenAI API"
        await update.message.reply_text(base + common_cmds + extra)
    else:
        await update.message.reply_text(base + common_cmds)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
         return
    user_id = update.effective_user.id
    base = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –ø–æ–º–æ—â—å"
    if is_admin(user_id):
        extra = "\n/model <name> ‚Äî —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n/quota ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞ OpenAI API"
        await update.message.reply_text(base + extra)
    else:
        await update.message.reply_text(base)

async def set_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–º–µ–Ω—É –º–æ–¥–µ–ª–∏.")
        return
    
    global current_model
    if not context.args:
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /model gpt-4o –∏–ª–∏ /model gpt-3.5-turbo"
        )
        return
    new_model = context.args[0].strip()
    current_model = new_model
    await update.message.reply_text(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {current_model}")

async def quota(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–º–µ–Ω—É –º–æ–¥–µ–ª–∏.")
        return
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ API. –ú–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    try:
        headers = {"Authorization": f"Bearer {OPENAI_API_KEY}"}
        r = requests.get(
            "https://api.openai.com/dashboard/billing/credit_grants",
            headers=headers,
            timeout=10,
        )
        if r.status_code != 200:
            await update.message.reply_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–≤–æ—Ç—É (HTTP {r.status_code}): {r.text}"
            )
            return
        data = r.json()
        total = data.get("total_granted", 0.0)
        used = data.get("total_used", 0.0)
        remaining = data.get("total_available", 0.0)
        await update.message.reply_text(
            f"üí∞ –ë–∞–ª–∞–Ω—Å OpenAI API:\n"
            f"‚Äî –í—ã–¥–∞–Ω–æ: ${total:.2f}\n"
            f"‚Äî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${used:.2f}\n"
            f"‚Äî –û—Å—Ç–∞—Ç–æ–∫: ${remaining:.2f}"
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–≤–æ—Ç—ã: {format_exc(e)}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return

    message = update.message
    chat = update.effective_chat
    user = update.effective_user
    user_id = user.id

    raw_text = message.text or ""
    user_input = raw_text.replace(f"@{BOT_USERNAME}", "").strip()

    logging.info(f"[{user.id}] @{user.username or 'no_username'} - TEXT: {user_input}")

    # –ë–∞–∑–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ OpenAI
    messages = []

    # 1) –ì–†–£–ü–ü–´: –µ—Å–ª–∏ —ç—Ç–æ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ ‚Äî –¥–æ–±–∞–≤–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if chat.type in ("group", "supergroup") and message.reply_to_message:
        reply_msg = message.reply_to_message
        if reply_msg.from_user and reply_msg.from_user.username == BOT_USERNAME:
            prev_text = reply_msg.text or ""
            if prev_text:
                messages.append({"role": "user", "content": prev_text})

    # 2) –ü–†–ò–í–ê–¢–ù–´–ï –ß–ê–¢–´: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if chat.type == "private" and user_id in ADMINS:
        history = user_histories[user_id]          # defaultdict ‚Äî KeyError –Ω–µ –±—É–¥–µ—Ç
        messages.extend(list(history))             # –æ—Ç–¥–∞—ë–º –∏—Å—Ç–æ—Ä–∏—é –≤ GPT
        messages.append({"role": "user", "content": user_input})
    else:
        messages.append({"role": "user", "content": user_input})

    try:
        # 3) –£–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –Ω—É–∂–µ–Ω –ª–∏ –≤–µ–±‚Äë–ø–æ–∏—Å–∫
        if should_web_search(user_input):
            raw_results = google_search(user_input, num_results=8, date_restrict="m6")
            answer_text = summarize_search_results(user_input, raw_results)
        else:
            # –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç GPT (–±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
            resp = client.chat.completions.create(   # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                model=current_model,
                messages=messages
            )
            answer_text = resp.choices[0].message.content

        logging.info(f"[BOT -> {user.id}] –û—Ç–≤–µ—Ç: {answer_text}")
        # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.reply_text(answer_text)

        # 5) –ï—Å–ª–∏ –ø—Ä–∏–≤–∞—Ç–∫–∞ —Å –∞–¥–º–∏–Ω–æ–º ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –∏ –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if chat.type == "private" and user_id in ADMINS:
            history = user_histories[user_id]
            history.append({"role": "assistant", "content": answer_text})

    except Exception as e:
        logging.exception("handle_text error")
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {format_exc(e)}")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return

    user = update.effective_user
    chat = update.effective_chat
    user_id = user.id

    logging.info(f"[{user.id}] @{user.username or 'no_username'} - VOICE: –ø–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    try:
        # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ
        voice_file = await update.message.voice.get_file()
        with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as f:
            await voice_file.download_to_drive(f.name)
            ogg_path = f.name

        # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ wav
        wav_path = ogg_path.replace(".ogg", ".wav")
        AudioSegment.from_ogg(ogg_path).export(wav_path, format="wav")

        # 3. –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å (Whisper)
        with open(wav_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
            )

        text = transcript.text.strip()
        logging.info(f"{user} - VOICE TEXT: {text}")

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
        messages = []
        if chat.type == "private" and user_id in ADMINS:
            history = user_histories[user_id]
            messages.extend(list(history))
            messages.append({"role": "user", "content": text})
        else:
            messages.append({"role": "user", "content": text})

        # 5. –û—Ç–≤–µ—á–∞–µ–º GPT
        resp = client.chat.completions.create(
            model=current_model,
            messages=messages,
        )
        answer_text = resp.choices[0].message.content

        logging.info(f"[BOT -> {user.id}] –û—Ç–≤–µ—Ç: {answer_text}")

        # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            f"üó£Ô∏è –¢—ã —Å–∫–∞–∑–∞–ª: {text}\n\nü§ñ {answer_text}"
        )

        # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –≤ –ø—Ä–∏–≤–∞—Ç–∫–µ
        if chat.type == "private" and user_id in ADMINS:
            history.append({"role": "assistant", "content": answer_text})

    except Exception as e:
        logging.error(f"{user} - VOICE ERROR: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {format_exc(e)}")

async def handle_unsupported(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update):
        return
    user = update.effective_user
    kind = type(update.message.effective_attachment)
    caption = update.message.caption or "(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)"

    logging.info(f"[{user.id}] @{user.username or 'no_username'} - UNSUPPORTED: {kind} - Caption: {caption}")
    await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è.")

async def search_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å: /search <—Ç–µ–∫—Å—Ç>")
        return
    
    query = " ".join(context.args)
    try:
        results = google_search(query)
        if not results:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        reply_text = "\n\n".join(results)
        await update.message.reply_text(reply_text)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

async def debug_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logging.info("RAW UPDATE: %s", update.to_dict())
    except Exception as e:
        logging.exception("Failed to log raw update: %s", e)

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if update.effective_chat.type == "private":
        user_histories.pop(user_id, None)
        await update.message.reply_text("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")
async def error_handler(update, context):
    logging.exception("Unhandled error: %s", context.error)

# --------------------
# Main
# --------------------
def main():
    init_env()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("model", set_model))
    app.add_handler(CommandHandler("quota", quota))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("search", search_cmd))

    # –°–æ–æ–±—â–µ–Ω–∏—è
    #app.add_handler(MessageHandler(filters.ALL, debug_log), group=0)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.PHOTO | Document.ALL | filters.VIDEO, handle_unsupported))

    app.add_error_handler(error_handler)

    logging.info(f"GPT-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}")
    app.run_polling()
    me = app.bot.get_me()
    logging.info("Bot username:", me.username)

if __name__ == "__main__":
    main()
